tests to make
- peel shift (easy, stuff like CD -> EF/GH/IJ/KL, just to be sure it works correctly, and verify it doesn't affect the numbers for point codes)
- test mcm.get_unit_sphere_midpoint_from_xyz
- test mcm.mag_3d_simple
- peel coordinate conversion to/from xyz
- point code to/from xyz via peel coordinates should match point code to/from xyz via ancestry

questions
- are segments (path between neighboring points in the 1/2/3 directions) the same length at a given iteration? I feel like this can't be true, or it can't be true while it's also true that the segments within an iteration are equidistant on the plane onto which the points are projected for finding peel coordinates. There must be distortion somewhere because the middle of the plane is bowed upward more to get to the surface of the sphere than the areas near the face's edges are, so there must be more dilation in that part of the face. Test lengths of segments throughout a face on both the sphere surface and the projected plane of the face (the one defined by the face's three corners). If somehow these are both true, then there must be angle distortion. But I consider it high burden of proof that they're both true. Need to look at this analytically and/or empirically.
-- 2024-11-19: after test of xyz by ancestry vs peel coordinates (with assumption of linearity in peel coordinates) passed for vertices and edge midpoints but failed for other points, I am now very convinced that this is not true. Need to account for the distortion created when warping between the face plane and the corresponding sphere section. Primacy given to sphere section because bisection of great-circle paths is the original construction of the lattice, so the points on the face plane will have distorted distances from each other. Need to figure out what to do from here, because I would really love to use the elegance and straightforwardness of peel coordinates if I can, so that we don't have to do ancestry recursion.
- how much variation is there in over/undersampling of points for each method of placing points by point code (e.g. bisection vs corrected plane gridding vs etc.)?
-- can make a function that generates random but relatively uniformly distributed points (fibonacci method?) at a higher frequency than the lattice points
-- - and then for each of those points, do something like create a value that is the sum of 1/r**2 for each lattice point, higher sum means more points nearby
-- - then map this "sampling frequency index" over the sphere so it's clearer how much variation there is
-- - and compare distribution/min/max of the sampling frequency index for each point placement method
